/** 1. Write a function, StrEnd, that takes as its arguments a string and a character and returns a 1 if the argument character is the last non-null character in the string and returns a 0 
 *	otherwise. 
 */

#include <stdio.h>

int str_end(char *str, char ch);

int main(void) {
	char *str = "String cheese", ch = 'g';
	printf("Sample string: ");
	puts(str);
	printf("Is %c the end of this string? %d\n", ch, str_end(str, ch));

	return 0;
}

int str_end(char *str, char ch) {	
	while(*str) {
		char prev = *str;
		if(!*++str && prev == ch) return 1;
		else continue;
	}

	return 0;
}


/** 2. strncmp is a version of strcmp that has an additional argument, an integer N, and which compares only the first N characters of the two argument strings. 
 * 	
 * 	Write two versions of strncmp: one that uses array indexing and one that uses only pointers. 
 */

#include <stdio.h>

int idx_strncmp(char str1[], char str2[], int n);
int ptr_strncmp(char *str1, char *str2, int n);

int main(void) {
	char str1[] = "Test1234", str2[] = "Test1235";
	char *ptr1 = "Test1234", *ptr2 = "Test1235";

	printf("Test: index-based strncmp of test strings \"Test1234\" and \"Test1235\" up to index 7: ");
	printf("%d\n", idx_strncmp(str1, str2, 7));
	printf("Test: pointer-based strncmp of test strings \"Test1234\" and \"Test1235\" up to index 8: ");
	printf("%d\n", ptr_strncmp(ptr1, ptr2, 8));
	
	return 0;
}

int idx_strncmp(char str1[], char str2[], int n) {
	int i = 0;

	while(i++ < n-1) {
		if(!(str1[i] && str2[i])) break; /* terminates loop if a null character is encountered in either string;
						the enclosed conditional !(str1[i] && str2[i]) is an application of De Morgan's Law. */
		if(str1[i] < str2[i]) return -1;
		else if(str1[i] > str2[i]) return 1;
	}

	return 0;
}

int ptr_strncmp(char *str1, char *str2, int n) {
	int i = 0;

	while(i++ < n-1) {
		if(!(*str1++ && *str2++)) break; // terminates loop if a null character is encountered in either string

		if(*str1 < *str2) return -1;
		else if(*str1 > *str2) return 1;
	}

	return 0;
}


/** 3. Consider a function, StrRev, whose argument is a string and whose actions are to reverse the elements in the string.
 * 	
 * 	Write two versions of StrRev: one that uses array indexing and one that uses pointers. 
 *
 * 	The use of an additional array or string is not permitted.
 */

#include <stdio.h>

void idx_str_rev(char str[]);
void ptr_str_rev(char *str);

int main(void) {
	char str[] = "String cheese";
	char ptr[] = "Abcdef ghijkle";
	
	idx_str_rev(str);
	printf("Original string: \"String cheese\"\nReversed string using array indexing: %s", str);

	ptr_str_rev(ptr);
	printf("\nString cheeseOriginal string: \"Abcdef ghijkle\"\nReversed string using pointers: %s", ptr);

	return 0;
}

void idx_str_rev(char str[]) {
	int i = 0, n = 0;

	while(str[n]) n++;
	int j = n-1;

	do {
		char temp = str[i];
		str[i] = str[j];
		str[j] = temp;
	} while(i++ < j--);
}

void ptr_str_rev(char *str) {
	char *p = str, *q = str;

	while(*q) q++;
	q -= 1;

	do {
		char temp = *q;
		*q = *p;
		*p = temp;
	} while(p++ < q--);
}


/** 4. Programming Project 1 on Page 311 of the textbook.
 * 	1. Write a program that finds the "smallest" and "largest" in a series of words. After the user enters the words, the program will determine which words would come first and last if
 * 	   the words were listed in dictionary order. The program must stop accepting input when the user enters a four-letter word. Assume that no word is more than 20 letters long. 
 * 	   An interactive session with the program might look like this:
 *
 * 	   Enter word: dog
 * 	   Enter word: zebra
 * 	   Enter word: rabbit
 * 	   Enter word: catfish
 * 	   Enter word: walrus
 * 	   Enter word: cat
 * 	   Enter word: fish
 *
 * 	   Smallest word: cat
 * 	   Largest word: zebra
 *
 * 	   Hint: Use two strings named smallest_word and largest_word to keep track of the "smallest" and "largest" words entered so far. 
 * 	   	 Each time the user enters a new word, use strcmp to compare it with smallest_word; if the word is "smaller", use strcpy to save it in smallest_word. 
 * 	   	 Do a similar comparison with largest_word. 
 * 	   	 Use strlen to determine when the user has entered a four-letter word.
 */

#include <stdio.h>
#include <string.h>
#define N 20

void smallest_and_largest();

int main(void) {
	smallest_and_largest();
}

void smallest_and_largest() {
	char input[N], smallest_word[N], largest_word[N];

	for(int i = 0; i < N; i++) {
		smallest_word[i] = 'z';
		largest_word[i] = 'a';
	}

	do {
		printf("Enter word: ");
		scanf("%20s", input);
		if(strcmp(input, smallest_word) <= 0) strcpy(smallest_word, input);
		if(strcmp(input, largest_word) >= 0) strcpy(largest_word, input);
	} while(strlen(input) != 4);

	printf("\nSmallest word: %s\n", smallest_word);
	printf("Largest word: %s\n", largest_word);
}
