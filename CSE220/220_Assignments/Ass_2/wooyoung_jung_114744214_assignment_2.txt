/* 1. Reads in a %5d input and determines whether it is a palindrome or not. */

#include <stdio.h>

int main(void) {
	int input;
	int d1, d2, d3, d4, d5;
	int is_palindrome;

	printf("Enter a 5-digit number: ");
	scanf("%5d", &input);

	d1 = input / 10000;
	d2 = (input % 10000) / 1000;
	d3 = (input % 1000) / 100;
	d4 = (input % 100) / 10;
	d5 = input % 10;

	is_palindrome = ( ((d1 == d5) && (d2 == d4)) ? 1 : 0);

	printf("%s", "Is the number a palindrome? ");
	if(is_palindrome == 1) printf("%s", "true\n");
	else if(is_palindrome == 0) printf("%s", "false\n");

	return 0;
}

/* 2. Reads in a %1d %d input as a pair of integers, where the first item represents the Product Number, and the latter the quantity of said product sold in the day. Computes the total value of items sold and returns the product. */

#include <stdio.h>

int main(void) {
	int product_number, quantity, price;
	int total_value;

	printf("Enter product number and quantity sold in the day: ");
	scanf("%1d%d", &product_number, &quantity);

	switch(product_number) {
		case 1: 
			price = 2980;
			break;
		case 2:
			price = 450;
			break;
		case 3:
			price = 990;
			break;
		case 4:
			price = 400;
			break;
		case 5:
			price = 750;
			break;
		default:
			price = 0;
			break;
	}
	
	printf("Total value of items sold in the day: %d won.\n", total_value = price * quantity);

	return 0;
}

/* 3. Reads two values, x and epsilon, and computes e^x using the formula
 *  e^x = 1 + (x/1!) + (x^2/2!) + (x^3/3!) + ... + (x^n/n!) < epsilon,
 *  where epsilon represents the error tolerance.
 */

#include <stdio.h>

int main(void) {
	int x;
	float epsilon;

	float sum = 1.0f, term = 1.0f;
	int i, num, denom;

	printf("Enter exponent x and error tolerance epsilon to approximate e^x: ");
	scanf("%d %f", &x, &epsilon);

	for(i = 1, num = 1, denom = 1; term > epsilon; i++) {
		num = (i == 1) ? x : (num * x);
		denom *= i;
		term = (float) num / denom;
		sum += term;
	}

	printf("Approximation of e^%d up to epsilon: %f\n", x, sum);

	return 0;
}

/* 4. A Pythagorean triangle is a right triangle in which the sum of the squares of two of the sides is equal to the
 * hypotenuse. We may represent such a triangle with a triplet of the three sides; e.g., <3, 4, 5>.
 *
 * Assuming the sides are all of integer values, write a program to determine and list (one per line) all Pythagorean triangles for which the sum of the three sides is less than N, where N is user input.
 */

#include <stdio.h>

int main(void) {
	int a, b, c;
	int a2, b2, c2;
	int n;

	printf("Enter an integer N to list all Pythagorean triangles where sum of all three sides is < N: ");
	scanf("%d", &n);

	printf("List of all Pythagorean triangles where sum of all three sides is < N: \n ");

	for(c = 3; c < n; c++) { // We know that in a right triangle, a < b < c, so I set arbitrary initial values.
		for(b = 2; b < c; b++) {
			for(a = 1; a < b; a++) {
				a2 = a * a;
				b2 = b * b;
				c2 = c * c;

				if( (c2 == (a2 + b2)) && ( (a + b + c) < n)) 
					printf("<%d, %d, %d>\n", a, b, c);
			}
		}
	}

	return 0;
}

/* 5. Write a program that prints a table of the binary, octal, and hexadecimal equivalents of decimal numbers in the 
 * range of 1 to N, where N is user input and less than 256.
 */

#include <stdio.h>

int main(void) {
	int n, dec, bin, oct, hex;
	int exp = 1;

	printf("Enter any number N less than 256: ");
	scanf("%d", &n);

	if(n >= 256) {
		do {
			printf("Input error. Please enter a number less than 256.");
			scanf("%d", &n);
		} while (n >= 256);
	}

	for (dec = 1; dec <= n; dec++) {
		int num, remainder, digit = 1;
		bin = 0, oct = 0, hex = 0;
		
		for (num = dec; num > 0; num /= 2) {
			remainder = num % 2;
			bin += (remainder * digit);
			digit *= 10;	
		}
		remainder = 1, digit = 1;
		 
		for (num = dec; num > 0; num /= 8) {
			remainder = num % 8;
			oct += (remainder * digit);
			digit *= 10;
		}
		remainder = 1, digit = 1;

		for(num = dec; num > 0; num /= 16) {
			remainder = num % 16;
			hex += (remainder * digit);
			digit *= 10;
		}
		remainder = 1, digit = 1;

		printf("Decimal: %03d\n", dec);
		printf("Binary: %08d\n", bin);
		printf("Octal: %03d\n", oct);
		printf("Hexadecimal: %03d\n\n", hex);

	}
 
	return 0;
}




